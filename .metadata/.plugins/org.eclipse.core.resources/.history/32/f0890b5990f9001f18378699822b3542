package com.tasks.pptReaderProject.service.impl;

import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.xslf.usermodel.XMLSlideShow;
import org.apache.poi.xslf.usermodel.XSLFAutoShape;
import org.apache.poi.xslf.usermodel.XSLFConnectorShape;
import org.apache.poi.xslf.usermodel.XSLFFreeformShape;
import org.apache.poi.xslf.usermodel.XSLFGroupShape;
import org.apache.poi.xslf.usermodel.XSLFShape;
import org.apache.poi.xslf.usermodel.XSLFSlide;
import org.apache.poi.xslf.usermodel.XSLFTextBox;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.tasks.pptReaderProject.service.pptUploadService;
import com.tasks.pptReaderProject.util.svgPathExtractor;

@Service
public class pptUploadServiceImpl implements pptUploadService {

	@Autowired
	private svgPathExtractor svgPathExtractor;
	
	@Override
	public List<Map<String, List<String>>> processPpt(MultipartFile file) throws IOException {
		List<Map<String, List<String>>> slidesPaths = new ArrayList<>();
		XMLSlideShow ppt = new XMLSlideShow(file.getInputStream());

		for (XSLFSlide slide : ppt.getSlides()) {
			Map<String, List<String>> slidePaths = new HashMap<>();
			List<String> outerPaths = new ArrayList<>();
			List<String> innerPaths = new ArrayList<>();
			for (XSLFShape shape : slide.getShapes()) {
				Map<String, List<String>> extractedPaths = svgPathExtractor.extractSvgPaths(shape);
				if (extractedPaths.containsKey("outer_paths")) {
					outerPaths.addAll(extractedPaths.get("outer_paths"));
				}
				if (extractedPaths.containsKey("inner_paths")) {
					innerPaths.addAll(extractedPaths.get("inner_paths"));
				}
			}
			if (!outerPaths.isEmpty()) {
				slidePaths.put("outer_paths", outerPaths);
			}
			if (!innerPaths.isEmpty()) {
				slidePaths.put("inner_paths", innerPaths);
			}
			if (!slidePaths.isEmpty()) {
				slidesPaths.add(slidePaths);
			}
		}
		return slidesPaths;
	}
	
}
